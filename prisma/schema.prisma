generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CourseType {
  CAInter
  CAFinal
}

model Course {
  id         String     @id @default(cuid())
  name       String
  courseType CourseType
  topics     Topic[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime? // soft delete

  @@index([name])
  @@index([courseType])
}

model Topic {
  id          String  @id @default(cuid())
  name        String
  description String?
  course      Course  @relation(fields: [courseId], references: [id])
  courseId    String

  testPapers TestPaper[]
  mcqs       MCQ[]       @relation("TopicToMCQs") // <-- added inverse relation with explicit name
  notes       Note[]      @relation("TopicToNotes") // ✅ added
  videoNotes  VideoNote[] @relation("TopicToVideoNotes") // ✅ added

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // soft delete

  @@index([courseId])
  @@index([name])
}

model TestPaper {
  id        String    @id @default(cuid())
  name      String
  description String?         // <-- Added
  timeLimitMinutes Int?       // <-- Added

  topic     Topic     @relation(fields: [topicId], references: [id])
  topicId   String
  mcqs      MCQ[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // soft delete

  @@index([topicId])
  @@index([name])
}

model MCQ {
  id            String @id @default(cuid())
  question      String
  explanation  String?
  marks         Int? // <-- Added
  options       Json // { a: "", b: "", c: "", d: "" }
  correctAnswer String // "a", "b", "c", "d"

  topic   Topic  @relation("TopicToMCQs", fields: [topicId], references: [id])
  topicId String

  testPaper   TestPaper @relation(fields: [testPaperId], references: [id])
  testPaperId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // soft delete

  @@index([topicId])
  @@index([testPaperId])
}

model Note {
  id          String   @id @default(cuid())
  name        String
  description String?
  fileUrl     String
  fileName    String
  fileSize    Int
  mimeType    String

  topic       Topic    @relation("TopicToNotes", fields: [topicId], references: [id]) // ✅ added
  topicId     String

  courseType  CourseType
  createdAt   DateTime @default(now())
  deletedAt   DateTime? // soft delete

  @@index([topicId])
  @@index([courseType])
}

model VideoNote {
  id          String   @id @default(cuid())
  url         String
  topic       Topic    @relation("TopicToVideoNotes", fields: [topicId], references: [id]) // ✅ added
  topicId     String

  courseType  CourseType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? // soft delete

  @@index([topicId])
  @@index([courseType])
}

model Trash {
  id         String    @id @default(cuid())
  tableName  String // "Course", "Topic", "MCQ", "TestPaper", "Note"
  entityId   String // id of the trashed entity
  trashedAt  DateTime  @default(now())
  purgeAfter DateTime? // optional, when to auto-purge

  @@index([tableName])
  @@index([entityId])
  @@index([trashedAt])
}
